# Jovanna Jimenez
# 1422700

import csv
import operator
from datetime import datetime


# create an item
class Item:
    def __init__(self, ID, mName, itemType, price, sDate, damaged):
        self.ID = ID
        self.mName = mName
        self.itemType = itemType
        self.price = price
        self.sDate = sDate
        self.damaged = damaged

items = {}
# Load in the Manufacturer List
with open('ManufacturerList.csv') as newFile:
    reader = csv.reader(newFile)
    for row in reader:
        i, m, t, d = row
        if i != "":
            newItem = Item(i, m, t, 'Default', 'Default', d)
            items[i] = newItem

# Load in the prices
with open('PriceList.csv') as newFile:
    reader = csv.reader(newFile)
    for row in reader:
        i, p = row
        if i != "":
            items[i].price = p

# Load in the service dates
with open('ServiceDatesList.csv') as newFile:
    reader = csv.reader(newFile)
    for row in reader:
        i, s = row
        if i != "":
            items[i].sDate = datetime.strptime(s, "%m/%d/%Y")

# Full Inventory Sorted By manufacturer.
with open('FullInventory.csv', mode='w') as manufacturer_file:
    item_writer = csv.writer(manufacturer_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    for item in (sorted(items.values(), key=operator.attrgetter('mName'))):
        item_writer.writerow([item.ID, item.mName, item.itemType, item.price, item.sDate, item.damaged])

# Inventory Sorted By Dates before today.
with open('PastServiceDateInventory.csv', mode='w') as pastservicedate_file:
    item_writer = csv.writer(pastservicedate_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    for item in (sorted(items.values(), key=operator.attrgetter('sDate'))):

        # The current date
        todaysDate = datetime.now()
        if item.sDate < todaysDate:
            item_writer.writerow([item.ID, item.mName, item.itemType, item.price, item.sDate, item.damaged])

# Inventory Sorted By If its damaged.
with open('DamagedInventory.csv', mode='w') as damagedinv_file:
    item_writer = csv.writer(damagedinv_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    for key in items:
        if items[key].damaged == 'damaged':
            item_writer.writerow(
                [key, items[key].mName, items[key].itemType, items[key].price, items[key].sDate, items[key].damaged])

# Full Inventory Sorted By type and exported by type. We also will account for the different manufacturers
types = {}
typesAndItemIds = []
manufacturers = []
for item in (sorted(items.values(), key=operator.attrgetter('itemType'))):
    if item.itemType.upper() in types:
        typesAndItemIds[types[item.itemType.upper()]].append(item.ID)
    else:
        typesAndItemIds.append([])
        types[item.itemType.upper()] = len(types)
        typesAndItemIds[types[item.itemType.upper()]].append(item.ID)
    if item.mName.strip().upper() in manufacturers:
        continue
    else:
        manufacturers.append(item.mName.strip().upper())

for key in types:
    file_name = key.capitalize() + 'Inventory.csv'
    with open(file_name, 'w') as type_file:
        item_writer = csv.writer(type_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        for word in typesAndItemIds[types[key]]:
            item_writer.writerow(
                [items[word].ID, items[word].mName, items[word].itemType, items[word].price, items[word].sDate,
                 items[word].damaged])

# Prompt the user for input
user_input = None
while user_input != 'q':
    user_input = input("\n Please enter an item manufacturer and item type (ex: Apple laptop) or enter 'q' to quit:\n")
    if user_input == 'q':
        print("Exiting Program...")
        break
    else:
        selected_manufacturer = ''
        selected_type = ''
        user_input_split = user_input.split()
        bad_input = False
        # If a work inputed by a user falls in our manufacturers list or out type list we want to store these values
        # we will flag an error if either a type or manufacturer is given multiple values
        # or if either one is empty.
        for word in user_input_split:
            if word.upper() in map(str.upper, manufacturers):
                if selected_manufacturer != '':
                    bad_input = True
                else:
                    selected_manufacturer = word.upper()
            elif word.upper() in map(str.upper, types):
                if selected_type != '':
                    bad_input = True
                else:
                    selected_type = word.upper()

        if selected_manufacturer == '' or selected_type == '':
            bad_input = True
        if bad_input == True:
            print("No such item in inventory")
        else:
            # we will create an array which will store matching and similar items if found
            matching_items = []
            similar_items = []
            # Check our stored list of parts by itemtype. WE do this by passing in the selectedtype we found from our user
            for word in typesAndItemIds[types[selected_type]]:
                # Don't add damaged items or past service to matched list or similar list
                today = datetime.now()
                expired = items[word].sDate < today
                # check if the item is the same manufactuerer as searched by the user
                # if so, add this to matching, if not add it to the similar list.
                if items[word].mName.strip().upper() == selected_manufacturer.strip().upper():
                    if expired == False and items[word].damaged != 'damaged':
                        matching_items.append(items[word].ID)
                else:
                    if expired == False and items[word].damaged != 'damaged':
                        similar_items.append(items[word].ID)
            totalPrice = 0
            numItems = 0
            averagePrice = 0
            matchedPrice = 0
            matchedDiference = 0
            closestitem = ''
            # if our matching list contains items
            if len(matching_items) > 0:
                # Output the item if matched and adjust the total price and number of matched items to determine an average cost
                for word in matching_items:
                    totalPrice += int(items[word].price)
                    numItems += 1
                    print("Your item is: {0}, {1}, {2}, {3}\n".format(items[word].ID, items[word].mName,
                                                                      items[word].itemType, items[word].price))
                averagePrice = totalPrice / numItems
                matchedPrice = 0
                matchedDiference = averagePrice * 2
            else:
                print("No items were found that were not past their service date\n")
            # Output item from different manufacturer that is closest in price to matched item
            # we proceed if similar_items array contains items
            if len(similar_items) > 0:
                lowestMatchPrice = 0;
                for word in similar_items:
                    matchedPrice = int(items[word].price)
                    # Get the similar item with the closest price to the initial item
                    if averagePrice > 0:
                        if abs(averagePrice - matchedPrice) < matchedDiference:
                            matchedDiference = abs(averagePrice - matchedPrice);
                            closestitem = word
                    else:
                        # if there was no matching parts we ge to this section and can still find similar results
                        # we will display the lowest cost item.
                        if lowestMatchPrice == 0:
                            lowestMatchPrice = matchedPrice
                            closestitem = items[word].ID
                        if lowestMatchPrice < matchedPrice:
                            lowestMatchPrice = matchedPrice
                            closestitem = items[word].ID
                if closestitem != '':
                    print("You may, also, consider: {0}, {1}, {2}, {3}\n".format(items[closestitem].ID,
                                                                                 items[closestitem].mName,
                                                                                 items[closestitem].itemType,
                                                                                 items[closestitem].price))
            else:
                print("No similar items in inventory")
